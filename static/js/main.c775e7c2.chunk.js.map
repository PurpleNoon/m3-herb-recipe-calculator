{"version":3,"sources":["libs/herbEffects.ts","libs/herbRecipeCalculate.ts","workers/findHerbRecipes.worker.ts","components/HerbRecipeCalculator.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["herbEffects","name","description","sampleDescription","tags","herbEffectsSet","keyBy","herbEffectTagSet","allHerbEffects","herbEffectWithTags","flatten","map","herbEffect","filter","herbEffectTag","includes","herbTag","herbEffectTagWrapperSet","groupBy","herbEffectWithTag","Object","keys","reduce","total","herbEffectTagWrapper","getHerbEffectTagSet","targetEffectTagSortOrderMap","正面效果","其他效果","负面效果","targetEffectTagSorter","a","b","avoidEffectTagSortOrderMap","avoidEffectTagSorter","getEffectType","effect","find","effectTag","Worker_fn","Worker","Option","Select","OptGroup","layout","labelCol","span","wrapperCol","tailLayout","offset","effectTypeClassesMapping","calcHerbRecipesWithWorker","params","Promise","resolve","worker","onmessage","event","action","data","handlerMap","finishCalculateHerbRecipes","terminate","list","postMessage","HerbRecipeCalculator","useState","targetEffects","avoidEffects","topCount","searchForm","Form","useForm","form","herbRecipeResult","setHerbRecipeResult","loading","setLoading","onFinish","values","herbRecipes","targetHerbEffectsOptions","sort","label","value","avoidHerbEffectsOptions","handleHerbNameCopied","message","success","style","margin","width","initialValues","textAlign","marginBottom","float","fontSize","color","pkg","version","clear","marginLeft","Item","rules","required","mode","allowClear","tagRender","renderProps","closable","onClose","onMouseDown","preventDefault","stopPropagation","marginRight","min","keyboard","type","htmlType","listStyleType","herbRecipeInfo","num","recipe","potion","recipeContent","herb","herbName","index","text","onCopy","cursor","String","time","entries","effects","effectA","effectB","lv","className","join","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.c775e7c2.chunk.js","sourcesContent":["const herbEffects = [\n  {\n    name: '急迫',\n    description: `方块挖掘速度提升(等级x20%)，攻击速度提升(等级x10%)，玩家的手臂挥动得更快`,\n    sampleDescription: `挖掘速度提升`,\n    tags: ['正面效果', '原版'],\n  },\n  {\n    name: '防火',\n    description: `获得对火、熔岩、烈焰人火球冲击与岩浆块效果的免疫`,\n    sampleDescription: `免疫火焰伤害`,\n    tags: ['正面效果', '原版'],\n  },\n  {\n    name: '力量',\n    description: `力量buff可以提高玩家的近战伤害。\\n带有该buff的玩家将提升0.3*（物理攻击力+武器面板）的近战伤害。\\n物理远程伤害及魔法伤害则不受影响。`,\n    sampleDescription: `提升近战伤害`,\n    tags: ['正面效果', '魔法金属', '机制重写'],\n  },\n  {\n    name: '缓慢',\n    description: `缩小视野\\n每等级速度减慢15%`,\n    sampleDescription: `移动速度降低`,\n    tags: ['负面效果', '原版'],\n  },\n  {\n    name: '药水时间缩短7分',\n    description: ``,\n    sampleDescription: ``,\n    tags: ['其他效果', '魔法金属'],\n  },\n  {\n    name: '速度',\n    description: `增加视野，每等级移动速度提升20%。`,\n    sampleDescription: `提高移动速度`,\n    tags: ['正面效果', '原版'],\n  },\n  {\n    name: '水下呼吸',\n    description: `氧气条在水下不会减少并且在水下的视野变好`,\n    sampleDescription: `水下不消耗氧气`,\n    tags: ['正面效果', '原版'],\n  },\n  {\n    name: '冰缓',\n    description: `这个效果将导致玩家体温下降，每5秒额外降低3点。`,\n    sampleDescription: `体温持续下降`,\n    tags: ['负面效果', '魔法金属'],\n  },\n  {\n    name: '魔导',\n    description: `在拥有此效果时，造成的魔法伤害+30%。`,\n    sampleDescription: `提高魔法伤害`,\n    tags: ['正面效果', '魔法金属'],\n  },\n  {\n    name: '跳跃提升',\n    description: `允许玩家跳得更高，每等级增加0.75米的跳跃能力，并且每等级减少1点摔落伤害。`,\n    sampleDescription: `提高跳跃力`,\n    tags: ['正面效果', '原版'],\n  },\n  {\n    name: '夜视',\n    description: `在视觉上提升亮度至14级，以提升黑暗中的视野亮度，最后10秒会闪烁。实际光照不变。`,\n    sampleDescription: `提升黑暗中视野亮度`,\n    tags: ['正面效果', '原版'],\n  },\n  {\n    name: '感性',\n    description: `持有此效果时，增加7.14%的职业经验获取。`,\n    sampleDescription: `提高职业经验获得量`,\n    tags: ['正面效果', '魔法金属'],\n  },\n  {\n    name: '诅咒',\n    description: `被诅咒时，造成的伤害降低，受到的伤害提高。`,\n    sampleDescription: `受到伤害提高，造成伤害降低`,\n    tags: ['负面效果', '魔法金属'],\n  },\n  {\n    name: '药水等级下降1级',\n    description: ``,\n    sampleDescription: ``,\n    tags: ['其他效果', '魔法金属'],\n  },\n  {\n    name: '生命恢复',\n    description: `每50刻（=2.5秒）恢复1点生命值，每等级恢复间隔减半。`,\n    sampleDescription: `每秒回复生命值`,\n    tags: ['正面效果', '原版'],\n  },\n  {\n    name: '看穿',\n    description: `提高5点穿透值。\\n持有此buff时能看到天空守护龙召唤的真理水晶。`,\n    sampleDescription: `提高穿透值`,\n    tags: ['正面效果', '魔法金属'],\n  },\n  {\n    // 出血和伤口是一个效果\n    name: '伤口',\n    description: `在拥有此效果时，无法受到治疗效果，如生命自然回复、竖琴治疗、吸血等效果。\\n食用料理回血、使用地下城补血站仍然有效。\\n被持有二转被动的剑斗士攻击时增加40%受到的伤害`,\n    sampleDescription: `无法回复生命值`,\n    tags: ['负面效果', '魔法金属'],\n  },\n  {\n    name: '药水等级提升1级',\n    description: ``,\n    sampleDescription: ``,\n    tags: ['其他效果', '魔法金属'],\n  },\n  {\n    name: '抗性提升',\n    description: `带有抗性提升buff的玩家将提高12点防御力，无论该buff的等级是多少。`,\n    sampleDescription: `降低受到的伤害`,\n    tags: ['正面效果', '魔法金属', '机制重写'],\n  },\n  {\n    name: '虚弱',\n    description: `每级虚弱状态将降低玩家0.5点物理近战伤害，过高等级的虚弱状态将使玩家无法造成近战伤害。\\n这个状态也会影响玩家空手攻击，带有2级虚弱的玩家空手攻击将没有任何效果，也无法击退。\\n物理远程伤害与魔法伤害则不受影响。`,\n    sampleDescription: `降低物理近战伤害`,\n    tags: ['负面效果', '魔法金属', '机制重写'],\n  },\n  {\n    name: '魔药',\n    description: `在拥有此效果时，造成的伤害+15%。`,\n    sampleDescription: `提高造成的伤害`,\n    tags: ['正面效果', '魔法金属'],\n  },\n  {\n    name: '药水时间提升8分',\n    description: ``,\n    sampleDescription: ``,\n    tags: ['其他效果', '魔法金属'],\n  },\n  {\n    name: '箭术',\n    description: `持有此效果时，提高30%物理远程伤害。`,\n    sampleDescription: `提高物理远程伤害`,\n    tags: ['正面效果', '魔法金属'],\n  },\n  {\n    name: '贪婪',\n    description: `在拥有此效果时，掉宝率提高30%。\\n击杀魔物的时候掉落更多的货币。\\n5.5.1版本及以前，贪婪效果的掉宝率提升为20%。`,\n    sampleDescription: `提高掉宝率`,\n    tags: ['正面效果', '魔法金属'],\n  },\n  {\n    name: '凋零',\n    description: `每40刻（即2秒）给予1点伤害。`,\n    sampleDescription: `持续受到伤害`,\n    tags: ['负面效果', '原版'],\n  },\n  {\n    name: '迅捷',\n    description: `持有此效果时，提高回避率。`,\n    sampleDescription: `大幅提高回避率`,\n    tags: ['正面效果', '魔法金属'],\n  },\n  {\n    name: '铁皮',\n    description: `持有此效果时，提高12点防御力。`,\n    sampleDescription: `提高防御力`,\n    tags: ['正面效果', '魔法金属'],\n  },\n  {\n    name: '精确',\n    description: `拥有此效果时，暴击率提高10点。`,\n    sampleDescription: `大幅提高暴击率`,\n    tags: ['正面效果', '魔法金属'],\n  },\n  {\n    name: '幸运',\n    description: `持有此效果时，能获得更多的生产经验。`,\n    sampleDescription: `提高生产经验获得量`,\n    tags: ['正面效果', '魔法金属'],\n  },\n  {\n    name: '失手',\n    description: `攻击时有一定概率失手而攻击无效化。通俗讲就是命中降低`,\n    sampleDescription: `攻击时有概率打空`,\n    tags: ['负面效果', '魔法金属'],\n  },\n  {\n    name: '中毒',\n    description: `每 25 刻（= 1.25 秒）给予 1 点伤害，每等级伤害间隔减半（数值取整）`,\n    sampleDescription: `持续受到伤害`,\n    tags: ['负面效果', '原版'],\n  },\n  {\n    name: '毅力',\n    description: `持有此效果时，死亡后不会掉落xp和货币。`,\n    sampleDescription: `死亡时不掉落货币和经验`,\n    tags: ['正面效果', '魔法金属'],\n  },\n  {\n    name: '饥饿',\n    description: `导致饥饿值更快的消耗，每刻减少 0.005 × 等级 的饥饿值，换言之每秒减少 0.1 × 等级 的饥饿值。`,\n    sampleDescription: `更快更容易消耗饱食度`,\n    tags: ['负面效果', '原版'],\n  },\n  {\n    name: '甜蜜',\n    description: `持有此效果时，每5秒的生命恢复量变为两倍，穿透值+3，暴击伤害+20%。\\n5.6.5版本前，甜蜜效果为提高生命恢复速度。`,\n    sampleDescription: `提高生命恢复`,\n    tags: ['正面效果', '魔法金属'],\n  },\n  {\n    name: '脱水',\n    description: `在拥有此效果时，每5秒额外减少50点水量。`,\n    sampleDescription: `水量不断减少`,\n    tags: ['负面效果', '魔法金属'],\n  },\n  {\n    name: '甜点',\n    description: `在拥有此效果时，暴击/回避+8，造成的伤害+10%，暴击伤害+20%。\\n5.6.5-2以前的效果为：造成的伤害+10%，暴击率+8，回避率+8。`,\n    sampleDescription: `提高暴击率与回避率`,\n    tags: ['正面效果', '魔法金属'],\n  },\n  {\n    name: '剧毒',\n    description: `拥有该效果时，每5秒受到最大生命值30%的伤害。该伤害无法被闪避，不受防御力减免，但“受到伤害-%”有减`,\n    sampleDescription: `持续受到大量伤害`,\n    tags: ['负面效果', '魔法金属'],\n  },\n  {\n    name: '随机效果',\n    description: ``,\n    sampleDescription: ``,\n    tags: ['其他效果', '魔法金属'],\n  },\n];\n\nexport interface HerbEffect {\n  name: string;\n  description: string;\n  sampleDescription: string;\n  tags: string[];\n}\n\nexport default herbEffects;\n","import { intersection, countBy, flatten, groupBy, keyBy } from 'lodash';\nimport { combinationsWithReplacement } from '@shlappas/itertools';\nimport type { HerbEffect } from '../libs/herbEffects';\nimport herbEffects from '../libs/herbEffects';\nimport herbs from '../libs/herbs';\nimport type { HerbInfo } from '../libs/herbs';\n\nconst herbEffectsSet = keyBy(herbEffects, 'name');\n// const herbSet = keyBy(herbs, 'name');\nexport interface Potion {\n  time: number;\n  effects: Record<string, number>;\n}\n\nconst getSpecialEffectMapWithLv = (recipe: HerbInfo[]) => {\n  // 计算效果数量\n  const specialEffectMap = countBy(\n    recipe,\n    herb => herb.effects[herb.effects.length - 1],\n  );\n  const specialEffectMapWithLv = {} as Record<string, number>;\n  for (const [specialEffect, weight] of Object.entries(specialEffectMap)) {\n    // 药草的每个效果相当于半级\n    const effectLv = Math.floor(weight * 0.5);\n    if (effectLv < 1) {\n      // 半级效果不生效\n      continue;\n    }\n    if (specialEffect === '药水时间提升8分') {\n      const time = specialEffectMapWithLv['药水时间'] || 0;\n      // 时间提升效果最多生效一次\n      specialEffectMapWithLv['药水时间'] = time + 8;\n    }\n    if (specialEffect === '药水时间缩短7分') {\n      const time = specialEffectMapWithLv['药水时间'] || 0;\n      // 时间下降效果最多生效一次\n      specialEffectMapWithLv['药水时间'] = time - 7;\n    }\n    if (specialEffect === '药水等级提升1级') {\n      const lv = specialEffectMapWithLv['药水等级'] || 0;\n      // 等级提升效果最多生效两次\n      specialEffectMapWithLv['药水等级'] = lv + Math.min(effectLv, 2);\n    }\n    if (specialEffect === '药水等级下降1级') {\n      const lv = specialEffectMapWithLv['药水等级'] || 0;\n      // 等级下降效果最多生效两次\n      specialEffectMapWithLv['药水等级'] = lv - Math.min(effectLv, 2);\n    }\n  }\n  return specialEffectMapWithLv;\n};\n\nconst getNormalEffectMapWithLv = (recipe: HerbInfo[]) => {\n  // 计算效果数量\n  const normalEffectMap = countBy(\n    flatten(recipe.map(herb => herb.effects.slice(0, herb.effects.length - 1))),\n  );\n  const normalEffectMapWithLv = {} as Record<string, number>;\n  for (const [effectName, weight] of Object.entries(normalEffectMap)) {\n    // 药草的每个效果相当于半级\n    const effectLv = Math.floor(weight * 0.5);\n    // 半级效果不生效\n    if (effectLv < 1) {\n      continue;\n    }\n    normalEffectMapWithLv[effectName] = effectLv;\n  }\n  return normalEffectMapWithLv;\n};\n\n// 计算药草配方效果\nexport function calculateHerbRecipeEffects(herbRecipe: HerbInfo[]): Potion {\n  const specialEffectMapWithLv = getSpecialEffectMapWithLv(herbRecipe);\n  const normalEffectMapWithLv = getNormalEffectMapWithLv(herbRecipe);\n\n  const improveTime = specialEffectMapWithLv['药水时间'] || 0;\n  const potionTime = improveTime;\n  const improveLv = specialEffectMapWithLv['药水等级'] || 0;\n  const finalEffectMapWithLv = Object.keys(normalEffectMapWithLv).reduce(\n    (total, normalEffect) => {\n      // 等级下降效果至少会将效果保留1级\n      total[normalEffect] = Math.max(\n        normalEffectMapWithLv[normalEffect] + improveLv,\n        1,\n      );\n      return total;\n    },\n    {} as Record<string, number>,\n  );\n\n  return {\n    time: potionTime,\n    effects: finalEffectMapWithLv,\n  };\n}\n\n// 把数字转成带符号的，如：\n// 1 => \"+1\"，\n// 0 => \"+0\"，\n// -1 => \"-1\"，\nexport function numberWithSymbol(num: number) {\n  if (num >= 0) {\n    return `+${num}`\n  }\n  return String(num)\n}\n\nexport type ValidHerbRecipe = [HerbInfo[], Potion];\n\nconst herbSlotCount = 5;\n\nexport interface CalculateHerbRecipeEventData {\n  name: string\n  data?: {\n    count: number;\n    total: number;\n  }\n}\n\ninterface FindHerbRecipeParams {\n  targetEffects: string[]\n  avoidEffects: string[]\n  notice: (message: string, data?: CalculateHerbRecipeEventData['data']) => void\n}\n\nexport function findHerbRecipe({\n  targetEffects = [],\n  avoidEffects = [],\n  notice = () => undefined,\n}: FindHerbRecipeParams) {\n  const aimHerbs = herbs.filter(\n    herb =>\n      herb.effects.includes('药水等级提升1级') ||\n      Boolean(intersection(targetEffects, herb.effects).length),\n  );\n  const totalHerbRecipesCount = combinationsWithReplacementCount(aimHerbs.length, herbSlotCount)\n  const herbRecipes = [];\n  const herbRecipesGenerator = combinationsWithReplacement(aimHerbs, herbSlotCount);\n  let iterResult = herbRecipesGenerator.next();\n  let iteratedCount = 1;\n  while (!iterResult.done) {\n    herbRecipes.push(iterResult.value);\n    notice('findedHerbRecipeCount', {\n      count: iteratedCount,\n      total: totalHerbRecipesCount\n    })\n    iteratedCount++;\n    iterResult = herbRecipesGenerator.next();\n  }\n  const herbRecipeResults = herbRecipes.map(\n    (herbRecipe, herbRecipeIndex) => {\n      const validHerbRecipe = [herbRecipe, calculateHerbRecipeEffects(herbRecipe)] as ValidHerbRecipe;\n      notice('calculatePotionsEffectCount', {\n        count: herbRecipeIndex + 1,\n        total: totalHerbRecipesCount\n      })\n      return validHerbRecipe;\n    },\n  );\n  notice('filteringEffectiveRecipes');\n  const validHerbRecipes = herbRecipeResults\n    .filter(([_, potion]) =>\n      Object.keys(potion.effects).every(\n        potionEffect => !avoidEffects.includes(potionEffect),\n      ),\n    )\n    .filter(herbRecipesWithoutAllNegativeEffectFilter);\n  return validHerbRecipes;\n}\n\nexport function getHerbEffectTagSet(allHerbEffects: HerbEffect[]) {\n  const herbEffectWithTags = flatten(\n    allHerbEffects.map(herbEffect =>\n      herbEffect.tags\n        .filter(herbEffectTag =>\n          ['正面效果', '负面效果', '其他效果'].includes(herbEffectTag),\n        )\n        .map(herbTag => [herbTag, herbEffect] as [string, HerbEffect]),\n    ),\n  );\n  const herbEffectTagWrapperSet = groupBy(\n    herbEffectWithTags,\n    herbEffectWithTag => herbEffectWithTag[0],\n  );\n  const herbEffectTagSet = Object.keys(herbEffectTagWrapperSet)\n    .reduce((total, herbEffectTag) => {\n      total[herbEffectTag] = herbEffectTagWrapperSet[herbEffectTag]\n        .map(herbEffectTagWrapper => herbEffectTagWrapper[1]);\n      return total;\n    }, {} as Record<string, HerbEffect[]>);\n  return herbEffectTagSet;\n}\n\nexport const herbEffectTagSet = getHerbEffectTagSet(herbEffects);\n\nexport const targetEffectTagSortOrderMap = {\n  正面效果: 1,\n  其他效果: 2,\n  负面效果: 3,\n} as Record<string, number>;\n\nexport function targetEffectTagSorter(a: string, b: string) {\n  return (\n    (targetEffectTagSortOrderMap[a] || 0) -\n    (targetEffectTagSortOrderMap[b] || 0)\n  );\n}\n\nexport const avoidEffectTagSortOrderMap = {\n  负面效果: 1,\n  其他效果: 2,\n  正面效果: 3,\n} as Record<string, number>;\n\nexport function avoidEffectTagSorter(a: string, b: string) {\n  return (\n    (avoidEffectTagSortOrderMap[a] || 0) - (avoidEffectTagSortOrderMap[b] || 0)\n  );\n}\n\nexport function herbRecipeResultSorter(a: ValidHerbRecipe, b: ValidHerbRecipe) {\n  return herbRecipeMaxPositiveEffectCountSorter(a, b);\n}\n\n// 根据正面效果的数量来排序，正面效果数量多的排在前面\n// 正面效果数量相等时，则根据其他效果和负面效果的数量和来排序，数量少的排在前面\n// 其他效果和负面效果的数量和相等时，则按照药剂时间来排序，药剂时间长的排在前面\nexport function herbRecipeMaxPositiveEffectCountSorter(a: ValidHerbRecipe, b: ValidHerbRecipe) {\n  const getPotionPositiveEffectCount = (potion: Potion) =>\n    Object.keys(potion.effects)\n      .filter(effect =>\n        herbEffectsSet[effect].tags.includes('正面效果')\n      ).length;\n  const bPositiveEffectCount = getPotionPositiveEffectCount(b[1])\n  const aPositiveEffectCount = getPotionPositiveEffectCount(a[1])\n  const positiveEffectSortResult = bPositiveEffectCount - aPositiveEffectCount\n  if (positiveEffectSortResult !== 0) {\n    return positiveEffectSortResult\n  }\n  const bOtherEffectCount = Object.keys(b[1].effects).length - bPositiveEffectCount\n  const aOtherEffectCount = Object.keys(a[1].effects).length - aPositiveEffectCount\n  const otherEffectSortResult = aOtherEffectCount - bOtherEffectCount\n  if (otherEffectSortResult !== 0) {\n    return otherEffectSortResult\n  }\n  return b[1].time - a[1].time\n}\n\n// 排序配方列表，效果等级高的排在前面\nexport function herbRecipeMaxEffectLvSorter(a: ValidHerbRecipe, b: ValidHerbRecipe) {\n  const getPotionMaxEffectLv = (potion: Potion) =>\n    Math.max(...Object.values(potion.effects));\n  const sum = (...numbers: number[]) =>\n    numbers.reduce((total, num) => total + num, 0);\n  const getPotionAllEffectLv = (potion: Potion) =>\n    sum(...Object.values(potion.effects));\n  const potionMaxEffectDiff =\n    getPotionMaxEffectLv(b[1]) - getPotionMaxEffectLv(a[1]);\n  if (potionMaxEffectDiff !== 0) {\n    return potionMaxEffectDiff;\n  }\n  return getPotionAllEffectLv(b[1]) - getPotionAllEffectLv(a[1]);\n}\n\n// 对配方列表进行处理，剔除全是负面效果的药剂，同时剔除效果列表为空的药剂\nexport function herbRecipesWithoutAllNegativeEffectFilter(validHerbRecipes: ValidHerbRecipe) {\n  const [, potion] = validHerbRecipes;\n  const potionEffectList = Object.keys(potion.effects)\n  if (potionEffectList.length === 0) {\n    return false\n  }\n  const isAllNegativeEffect = potionEffectList.every(effect => getEffectType(effect) === '负面效果')\n  return !isAllNegativeEffect\n}\n\n// 获取效果属于哪种类型\nexport function getEffectType(effect: string) {\n  const { tags } = herbEffectsSet[effect];\n  return ['正面效果', '其他效果', '负面效果']\n    .find(effectTag => tags.includes(effectTag)) || '';\n}\n\n// 对药剂效果列表进行排序，正面效果排在最前面，其他效果排在正面效果之后，负面效果排在最后\nexport function potionEffectSorter(effectA: string, effectB: string) {\n  return targetEffectTagSorter(getEffectType(effectA), getEffectType(effectB));\n}\n\n\n// 计算阶乘\nexport function factorial(n: number) {\n  let result = n;\n  for (let i = n - 1; i > 1; i--) {\n    result *= i;\n  }\n  return result;\n}\n\n// 计算 combinationsWithReplacement 返回的元素总数\nexport function combinationsWithReplacementCount(n: number, r: number) {\n  // return (n+r-1)! / r! / (n-1)! when n > 0\n  // 计算公式来自于 python itertools 文档\n  // https://docs.python.org/zh-cn/3/library/itertools.html\n  return factorial(n + r - 1) / factorial(r) / factorial(n - 1)\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/findHerbRecipes.worker.fdd675b3.worker.js\");\n}\n","import { Select, Form, InputNumber, Button, Tag, message } from 'antd';\nimport { useState, FC } from 'react';\nimport {\n  targetEffectTagSorter,\n  avoidEffectTagSorter,\n  herbEffectTagSet,\n  potionEffectSorter,\n  getEffectType,\n  numberWithSymbol,\n} from '../libs/herbRecipeCalculate';\nimport type { ValidHerbRecipe } from '../libs/herbRecipeCalculate';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport './HerbRecipeCalculator.css';\nimport pkg from '../../package.json'\n\n// 这里的 .ts 必须加\nimport Worker from '../workers/findHerbRecipes.worker.ts';\n\nconst { Option, OptGroup } = Select;\n\nconst layout = {\n  labelCol: { span: 6 },\n  wrapperCol: { span: 18 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 6, span: 18 },\n};\n\nexport interface HerbSearchForm {\n  targetEffects: string[];\n  avoidEffects: string[];\n  topCount: number;\n}\n\ninterface HerbRecipeCalculatorProps {\n  search?: (form: HerbSearchForm) => void;\n}\n\n// 筛选配方 效果计算\n\nconst effectTypeClassesMapping = {\n  正面效果: 'herb-card__effect--positive',\n  其他效果: 'herb-card__effect--other',\n  负面效果: 'herb-card__effect--negative',\n} as Partial<Record<string, string>>\n\n// 使用 web workers 进行计算药剂配方，避免阻塞主线程\nconst calcHerbRecipesWithWorker = (params: HerbSearchForm): Promise<ValidHerbRecipe[]> => {\n  return new Promise((resolve) => {\n    const worker = new Worker();\n    worker.onmessage = function (event) {\n      const action = event.data;\n      const handlerMap = {\n        finishCalculateHerbRecipes(event) {\n          worker.terminate();\n          const { data } = event.data;\n          resolve(data.list);\n        }\n      } as Record<string, (event: MessageEvent<any>) => void>;\n      handlerMap[action.name] && handlerMap[action.name](event);\n    };\n    worker.postMessage({\n      name: 'findRecipes',\n      data: params\n    });\n  })\n}\n\nconst HerbRecipeCalculator: FC<HerbRecipeCalculatorProps> = () => {\n  // const { search } = props;\n  // TODO: 添加仅拥有药草菇选项\n  // TODO: 添加一些预设，如法师、远程、近战等\n  // TODO: 添加配方效果计算器\n  // TODO: 美化界面\n  // TODO: 高级模式，功能（暂定）：自定义排序，\"好友模式\"（整个小问号，进行对 \"好友模式\" 的说明）等\n  const [searchForm] = useState<HerbSearchForm>({\n    targetEffects: ['药水等级提升1级', '药水时间提升8分'],\n    avoidEffects: [],\n    topCount: 99,\n  });\n  const [form] = Form.useForm();\n  const [herbRecipeResult, setHerbRecipeResult] = useState<ValidHerbRecipe[]>(\n    [],\n  );\n  const [loading, setLoading] = useState(false)\n  const onFinish = async (values: typeof searchForm) => {\n    // eslint-disable-next-line no-console\n    // TODO: 添加查询到的配方总数\n    // TODO: 拆分 form 和 list 组件\n    setLoading(true);\n    // 使用 web workers 进行计算药剂配方，避免阻塞主线程\n    const herbRecipes = await calcHerbRecipesWithWorker(values);\n    setHerbRecipeResult(herbRecipes)\n    setLoading(false);\n  };\n  const targetHerbEffectsOptions = Object.keys(herbEffectTagSet)\n    .sort(targetEffectTagSorter)\n    .map(herbEffectTag => (\n      <OptGroup key={herbEffectTag} label={herbEffectTag}>\n        {herbEffectTagSet[herbEffectTag].map(\n          ({ name, sampleDescription }) => (\n            <Option key={name + herbEffectTag} value={name}>\n              {`${name} ${sampleDescription ? `[${sampleDescription}]` : ''}`}\n            </Option>\n          ),\n        )}\n      </OptGroup>\n    ));\n  const avoidHerbEffectsOptions = Object.keys(herbEffectTagSet)\n    .sort(avoidEffectTagSorter)\n    .map(herbEffectTag => (\n      <OptGroup key={herbEffectTag} label={herbEffectTag}>\n        {herbEffectTagSet[herbEffectTag]\n          .map(\n            ({ name, sampleDescription }) => (\n              <Option key={name + herbEffectTag} value={name}>\n                {`${name} ${sampleDescription ? `[${sampleDescription}]` : ''}`}\n              </Option>\n            ),\n        )}\n      </OptGroup>\n    ));\n  const handleHerbNameCopied = () => message.success('药草名称复制完成');\n  return (\n    <div>\n      <div\n        style={{\n          margin: '0 auto',\n          width: 480,\n        }}>\n        <div>\n          <Form\n            initialValues={searchForm}\n            {...layout}\n            form={form}\n            name=\"control-hooks\"\n            onFinish={onFinish}>\n            <h2\n              style={{\n                textAlign: 'center',\n                marginBottom: 0\n              }}>\n              药草计算器\n            </h2>\n            <div>\n              <div style={{\n                float: 'right',\n                fontSize: 12,\n                color: 'gray'\n              }}>\n                Version {pkg.version}\n              </div>\n              <div style={{ clear: 'both' }}></div>\n            </div>\n            <div>\n              <hr />\n              作者：泪随樱花落<span style={{ marginLeft: '1rem' }}></span>QQ：346014945\n              <br />\n              目前还在不断完善中（佛系更新ing），如果有什么好的建议或者发现了\n              bug，欢迎联系作者_(:з」∠)_\n              <br />\n              PS: 查找配方可能会慢一点，因为配方数量比较大（取决于选择的期望的效果和排除的效果），稍等一会即可\n              <hr />\n            </div>\n            <Form.Item\n              name=\"targetEffects\"\n              label=\"期望的效果\"\n              rules={[{ required: true, message: '请选择期望的效果' }]}>\n              <Select\n                mode=\"multiple\"\n                allowClear={true}\n                tagRender={renderProps => {\n                  const { value, closable, onClose } = renderProps;\n                  return (\n                    <Tag\n                      color={'default'}\n                      onMouseDown={event => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                      }}\n                      closable={closable}\n                      onClose={onClose}\n                      style={{ marginRight: 3 }}>\n                      {value}\n                    </Tag>\n                  );\n                }}>\n                {targetHerbEffectsOptions}\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"avoidEffects\" label=\"排除的效果\">\n              <Select\n                mode=\"multiple\"\n                allowClear={true}\n                tagRender={renderProps => {\n                  const { value, closable, onClose } = renderProps;\n                  return (\n                    <Tag\n                      color={'default'}\n                      onMouseDown={event => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                      }}\n                      closable={closable}\n                      onClose={onClose}\n                      style={{ marginRight: 3 }}>\n                      {value}\n                    </Tag>\n                  );\n                }}>\n                {avoidHerbEffectsOptions}\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"topCount\" label=\"配方数量\">\n              <InputNumber min={1} keyboard={true} />\n            </Form.Item>\n            <Form.Item {...tailLayout}>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n                查找配方\n              </Button>\n            </Form.Item>\n          </Form>\n        </div>\n        <hr />\n        <div>\n          <h3>药水配方列表:</h3>\n          <ul style={{ listStyleType: 'decimal' }}>\n            {/* TODO: 做成卡片样式 */}\n            {herbRecipeResult.map(herbRecipeInfo => {\n              const [recipe, potion] = herbRecipeInfo;\n              const recipeContent = (\n                <div>\n                  {/* 药草列表： */}\n                  {recipe\n                    .map(herb => herb.name)\n                    .map((herbName, index) => (\n                      <CopyToClipboard\n                        key={herbName + String(index)}\n                        text={herbName}\n                        onCopy={handleHerbNameCopied}>\n                        <Tag style={{\n                          cursor: 'pointer'\n                        }}>{herbName}</Tag>\n                      </CopyToClipboard>\n                    ))}\n                </div>\n              )\n              return (\n                <li style={{\n                  marginBottom: 4\n                }} key={recipe.map(herb => herb.name).join(',')}>\n                  {recipeContent}\n                  <div>药水变化时间: {numberWithSymbol(potion.time)}</div>\n                  <div>效果：</div>\n                  {Object.entries(potion.effects)\n                    .sort((a, b) => potionEffectSorter(a[0], b[0]))\n                    .map(([effect, lv]) => (\n                    <div key={effect} style={{ marginLeft: '2rem' }}>\n                      <span className={effectTypeClassesMapping[getEffectType(effect)] || ''}>\n                        {effect\n                      }</span>: {lv}\n                    </div>\n                  ))}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HerbRecipeCalculator;\n","import HerbRecipeCalculator from './components/HerbRecipeCalculator';\n\nfunction App() {\n  return (\n    <div>\n      <HerbRecipeCalculator></HerbRecipeCalculator>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}